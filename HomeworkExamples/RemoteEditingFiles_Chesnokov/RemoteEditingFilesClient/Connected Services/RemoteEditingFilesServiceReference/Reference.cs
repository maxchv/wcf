//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteEditingFilesClient.RemoteEditingFilesServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteEditingFilesServiceReference.IRemoteEditingFilesService", CallbackContract=typeof(RemoteEditingFilesClient.RemoteEditingFilesServiceReference.IRemoteEditingFilesServiceCallback))]
    public interface IRemoteEditingFilesService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/NewClientConnects")]
        void NewClientConnects();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/NewClientConnects")]
        System.Threading.Tasks.Task NewClientConnectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/ClientDisconnected")]
        void ClientDisconnected(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/ClientDisconnected")]
        System.Threading.Tasks.Task ClientDisconnectedAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/GetFilesList")]
        void GetFilesList();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/GetFilesList")]
        System.Threading.Tasks.Task GetFilesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/CreateNewFile")]
        void CreateNewFile(string fileName, string id, string initData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/CreateNewFile")]
        System.Threading.Tasks.Task CreateNewFileAsync(string fileName, string id, string initData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/RemoveFile")]
        void RemoveFile(string fileName, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/RemoveFile")]
        System.Threading.Tasks.Task RemoveFileAsync(string fileName, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/StartEditFile")]
        void StartEditFile(string fileName, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/StartEditFile")]
        System.Threading.Tasks.Task StartEditFileAsync(string fileName, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/EndEditFile")]
        void EndEditFile(string fileName, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/EndEditFile")]
        System.Threading.Tasks.Task EndEditFileAsync(string fileName, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/UpdateFileData")]
        void UpdateFileData(string fileName, string newData, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/UpdateFileData")]
        System.Threading.Tasks.Task UpdateFileDataAsync(string fileName, string newData, string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteEditingFilesServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/SendFilesList")]
        void SendFilesList(string[] filesName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/SendResultCreateNewFile")]
        void SendResultCreateNewFile(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/SendResultRemoveFile")]
        void SendResultRemoveFile(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/SendDataFile")]
        void SendDataFile(string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteEditingFilesService/SetUserId")]
        void SetUserId(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteEditingFilesServiceChannel : RemoteEditingFilesClient.RemoteEditingFilesServiceReference.IRemoteEditingFilesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteEditingFilesServiceClient : System.ServiceModel.DuplexClientBase<RemoteEditingFilesClient.RemoteEditingFilesServiceReference.IRemoteEditingFilesService>, RemoteEditingFilesClient.RemoteEditingFilesServiceReference.IRemoteEditingFilesService {
        
        public RemoteEditingFilesServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RemoteEditingFilesServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RemoteEditingFilesServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteEditingFilesServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteEditingFilesServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void NewClientConnects() {
            base.Channel.NewClientConnects();
        }
        
        public System.Threading.Tasks.Task NewClientConnectsAsync() {
            return base.Channel.NewClientConnectsAsync();
        }
        
        public void ClientDisconnected(string id) {
            base.Channel.ClientDisconnected(id);
        }
        
        public System.Threading.Tasks.Task ClientDisconnectedAsync(string id) {
            return base.Channel.ClientDisconnectedAsync(id);
        }
        
        public void GetFilesList() {
            base.Channel.GetFilesList();
        }
        
        public System.Threading.Tasks.Task GetFilesListAsync() {
            return base.Channel.GetFilesListAsync();
        }
        
        public void CreateNewFile(string fileName, string id, string initData) {
            base.Channel.CreateNewFile(fileName, id, initData);
        }
        
        public System.Threading.Tasks.Task CreateNewFileAsync(string fileName, string id, string initData) {
            return base.Channel.CreateNewFileAsync(fileName, id, initData);
        }
        
        public void RemoveFile(string fileName, string id) {
            base.Channel.RemoveFile(fileName, id);
        }
        
        public System.Threading.Tasks.Task RemoveFileAsync(string fileName, string id) {
            return base.Channel.RemoveFileAsync(fileName, id);
        }
        
        public void StartEditFile(string fileName, string id) {
            base.Channel.StartEditFile(fileName, id);
        }
        
        public System.Threading.Tasks.Task StartEditFileAsync(string fileName, string id) {
            return base.Channel.StartEditFileAsync(fileName, id);
        }
        
        public void EndEditFile(string fileName, string id) {
            base.Channel.EndEditFile(fileName, id);
        }
        
        public System.Threading.Tasks.Task EndEditFileAsync(string fileName, string id) {
            return base.Channel.EndEditFileAsync(fileName, id);
        }
        
        public void UpdateFileData(string fileName, string newData, string id) {
            base.Channel.UpdateFileData(fileName, newData, id);
        }
        
        public System.Threading.Tasks.Task UpdateFileDataAsync(string fileName, string newData, string id) {
            return base.Channel.UpdateFileDataAsync(fileName, newData, id);
        }
    }
}
